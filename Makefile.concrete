# Paths inside docker container
FSTAR_HOME ?= /home/build/FStar
DY_HOME ?= /home/build/dolev-yao-star
HACL_HOME = $(DY_HOME)/concrete/hacl-star-snapshot

CACHE_DIR     ?= $(DY_HOME)/.cache/concrete
HINT_DIR      ?= $(DY_HOME)/.hints/concrete

.PHONY: all verify clean

all:
	rm -f .depend.concrete && $(MAKE) -f Makefile.concrete .depend.concrete
	$(MAKE) -f Makefile.concrete verify

COMPARSE_LIB_FILES = Comparse.Bytes.Typeclass Comparse.Utils Comparse.Parser.Builtins  Comparse.Parser.Typeclass Comparse.Parser.Derived
COMPARSE_LIB_FST_FILES=$(addprefix $(DY_HOME)/comparse/,$(addsuffix .fst,$(COMPARSE_LIB_FILES)))
COMPARSE_LIB_CMX_FILES = $(addprefix ocaml-concrete/,$(addsuffix .cmx,$(subst .,_,$(COMPARSE_LIB_FILES))))

LIB_BASE_FST_FILES = $(COMPARSE_LIB_FST_FILES) $(addprefix $(DY_HOME)/,Ord.fst SecrecyLabels.fst CryptoEffect.fst GlobalRuntimeLib.fst LabeledRuntimeAPI.fst LabeledPKI.fst AttackerAPI.fst SerializationHelpers.fst RelaxLabels.fst ComparseGlue.fst SecurityLemmas.fst) $(addprefix $(DY_HOME)/concrete/,CryptoLib.fst LabeledCryptoAPI.fst)
LIB_BASE_CMX_FILES = $(COMPARSE_LIB_CMX_FILES) ocaml-concrete/Ord.cmx ocaml-concrete/SecrecyLabels.cmx ocaml-concrete/CryptoLib.cmx ocaml-concrete/CryptoEffect.cmx ocaml-concrete/GlobalRuntimeLib.cmx ocaml-concrete/LabeledCryptoAPI.cmx ocaml-concrete/LabeledRuntimeAPI.cmx ocaml-concrete/LabeledPKI.cmx ocaml-concrete/AttackerAPI.cmx ocaml-concrete/SerializationHelpers.cmx ocaml-concrete/RelaxLabels.cmx ocaml-concrete/ComparseGlue.cmx ocaml-concrete/SecurityLemmas.cmx


FSTAR_INCLUDE_DIRS = $(DY_HOME) $(DY_HOME)/concrete $(DY_HOME)/comparse $(HACL_HOME)/lib $(HACL_HOME)/specs

FSTAR_FLAGS = --cmi \
  --warn_error -321-331 \
  --cache_checked_modules --cache_dir $(CACHE_DIR) \
  --already_cached "+Prims +FStar +LowStar +C +TestLib" \
  $(addprefix --include ,$(FSTAR_INCLUDE_DIRS))

FSTAR = $(FSTAR_HOME)/bin/fstar.exe $(FSTAR_FLAGS) $(OTHERFLAGS)

ENABLE_HINTS = --use_hints --use_hint_hashes --record_hints # --query_stats

ALL_SOURCES = $(wildcard *.fst) $(wildcard *.fsti)

ROOTS = $(filter-out $(FIXME),$(ALL_SOURCES))

.depend.concrete: $(HINT_DIR) $(CACHE_DIR)
	$(info $(ROOTS))
	$(FSTAR) --cmi --dep full $(ROOTS) --extract '* -Prims -LowStar -FStar -Lib -Spec -Vale' > $@

include .depend.concrete

$(HINT_DIR):
	mkdir -p $@

$(CACHE_DIR):
	mkdir -p $@

$(CACHE_DIR)/%.checked: | .depend.concrete $(HINT_DIR) $(CACHE_DIR)
	$(FSTAR) $< $(ENABLE_HINTS) --hint_file $(HINT_DIR)/$(notdir $*).hints

verify: $(addsuffix .checked, $(addprefix $(CACHE_DIR)/,$(ROOTS)))

# Targets for interactive mode

%.fst-in:
	$(info $(FSTAR_FLAGS) \
	  $(ENABLE_HINTS) --hint_file $(HINT_DIR)/$(basename $@).fst.hints)

%.fsti-in:
	$(info $(FSTAR_FLAGS) \
	  $(ENABLE_HINTS) --hint_file $(HINT_DIR)/$(basename $@).fsti.hints)

#OCaml extraction
CODEGEN=OCaml

TAC = $(shell which tac >/dev/null 2>&1 && echo "tac" || echo "tail -r")

ifeq ($(OS),Windows_NT)
  export OCAMLPATH := $(FSTAR_HOME)/lib;$(OCAMLPATH)
else
  export OCAMLPATH := $(FSTAR_HOME)/lib:$(OCAMLPATH)
endif

OCAMLOPT = ocamlfind opt -package fstar.lib -thread -linkpkg -g -I ocaml-concrete -I $(HACL_HOME)/ml -w -8-20-26
OCAMLSHARED = ocamlfind opt -shared -package fstar.lib -g -I ocaml-concrete -I $(HACL_HOME)/ml -w -8-20-26

.PRECIOUS: %.ml
%.ml:
	$(FSTAR) --codegen $(CODEGEN) \
	    --include .. --odir ocaml-concrete --extract_module $(basename $(notdir $(subst _,.,$@))) \
	    $(notdir $(subst _,.,$(subst .ml,.fst,$@)))

%.cmx: %.ml
	$(OCAMLOPT) -c $< -o $@



# Clean targets

SHELL=/bin/bash

clean:
	rm -rf ocaml-concrete *~

distclean: clean
	rm -rf .cache/*

